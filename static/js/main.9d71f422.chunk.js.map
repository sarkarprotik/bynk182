{"version":3,"sources":["Assets/code.svg","Components/NameInput.tsx","Redux/actions.js","Components/SsnInput.tsx","Components/EmailInput.tsx","Components/MobileInput.tsx","Components/CountryInput.tsx","Components/AvatarInput.tsx","Components/DrawerForm.tsx","Components/DataTable.tsx","MainComponent.tsx","App.tsx","serviceWorker.ts","Redux/reducer.js","index.tsx"],"names":["module","exports","connect","state","name","dispatch","setName","value","type","props","useState","setValue","isValid","setIsValid","console","log","handleInput","e","preventDefault","input","target","test","validateName","warning","Item","validateStatus","help","onChange","placeholder","success","hasFeedback","emptyInput","length","personnummer","require","ssn","setSsn","valid","validateSSN","email","setEmail","String","toLowerCase","validateEmail","mobile","setMobile","number","Option","country","setCountry","request","a","fetch","response","json","countryList","map","c","useEffect","handleChange","defaultValue","beforeUpload","file","isJpgOrPng","message","error","isLt2M","size","image","setImage","loading","setLoading","imageUrl","setImageUrl","uploadButton","className","listType","showUploadList","action","info","status","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","getBase64","originFileObj","src","alt","style","width","data","addUser","object","visible","setVisible","onClose","uniqueID","replace","r","Math","random","toString","handleSubmit","errorMsg","newUser","id","key","avatar","localStorage","getItem","cleanData","setItem","JSON","stringify","lsData","parse","notification","open","description","icon","color","onClick","title","window","innerWidth","onSubmit","layout","hideRequiredMark","gutter","span","label","position","left","bottom","borderTop","padding","background","textAlign","marginRight","deleteUser","userData","setUserData","handleDelete","userObject","updatedUserData","filter","parsedOutput","deleteUserLocalStorage","cancel","columns","dataIndex","render","text","height","record","onConfirm","onCancel","okText","cancelText","href","minWidth","maxHeight","backgroundColor","opacity","pagination","dataSource","item","MainComponent","App","borderRadius","justifyContent","Logo","Boolean","location","hostname","match","initialState","reducer","updatedData","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d71f422.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/code.45af7c0f.svg\";","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Input, Form } from 'antd'\nimport * as actionTypes from '../Redux/actions'\n\nconst NameInput = (props: any) => {\n  const [value, setValue] = useState('')\n  const [isValid, setIsValid] = useState(false)\n\n  const { name, setName } = props\n  isValid ? setName(value) : setName('')\n  console.log('reduxx', name)\n  const validateName = (name: string) => {\n    if (!/[^a-zA-ZöäåÖÄÅ\\s]/.test(name)) {\n      console.log(`${name} is Valid`)\n      setIsValid(true)\n    } else {\n      console.log(`${name} is NOT Valid`)\n      setIsValid(false)\n    }\n  }\n\n  const handleInput = (e: any) => {\n    e.preventDefault()\n    let input = e.target.value\n    setValue(input)\n    validateName(input)\n  }\n\n  const warning = (\n    <Form>\n      <Form.Item validateStatus={'warning'} help={'Name has invalid Characters'}>\n        <Input\n          onChange={e => handleInput(e)}\n          placeholder=\"please enter url description\"\n          value={value}\n        />\n      </Form.Item>\n    </Form>\n  )\n\n  const success = (\n    <Form>\n      <Form.Item validateStatus={'success'} hasFeedback help={''}>\n        <Input\n          onChange={e => handleInput(e)}\n          placeholder=\"please enter url description\"\n          value={value}\n        />\n      </Form.Item>\n    </Form>\n  )\n  const emptyInput = (\n    <Form>\n      <Form.Item validateStatus={'success'} help={''}>\n        <Input\n          onChange={e => handleInput(e)}\n          placeholder=\"please enter url description\"\n          value={value}\n        />\n      </Form.Item>\n    </Form>\n  )\n  return <Form>{value.length === 0 ? emptyInput : isValid ? success : warning}</Form>\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    ...state,\n    name: state.name\n  }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setName: (value: any) => dispatch({ type: actionTypes.SET_NAME, name: value })\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NameInput)\n","export const SET_IMAGE = 'SET_IMAGE'\nexport const SET_NAME = 'SET_NAME'\nexport const SET_SSN = 'SET_SSN'\nexport const SET_MOBILE = 'SET_MOBILE'\nexport const SET_EMAIL = 'SET_EMAIL'\nexport const SET_COUNTRY = 'SET_COUNTRY'\nexport const ADD_USER = 'ADD_USER'\nexport const DELETE_USER = 'DELETE_USER'\n","import React, { useState } from 'react'\n\nimport { connect } from 'react-redux'\n\nimport { Input, Form } from 'antd'\nimport * as actionTypes from '../Redux/actions'\n\nconst personnummer = require('personnummer')\n\nconst SsnInput = (props: any) => {\n  const [value, setValue] = useState('')\n  const [isValid, setIsValid] = useState(false)\n  const { ssn, setSsn } = props\n\n  isValid ? setSsn(value) : setSsn('')\n  console.log('reduxx', ssn)\n\n  const validateSSN = (ssn: number) => {\n    if (personnummer.valid(ssn)) {\n      //   setSSN(ssn); this is going to redux\n      setIsValid(true)\n      console.log(`${ssn} is valid`)\n    } else {\n      //   setSSN('') redux\n      setIsValid(false)\n      console.log(`${ssn} is NOT valid`)\n    }\n  }\n  const handleInput = (e: any) => {\n    e.preventDefault()\n    let input = e.target.value\n    setValue(input)\n    validateSSN(input)\n  }\n  const warning = (\n    <Form>\n      <Form.Item validateStatus={'error'} help={'Use this format: ÅÅÅMMDDNNNN'}>\n        <Input onChange={e => handleInput(e)} placeholder=\"ÅÅÅMMDDNNNN\" value={value} />\n      </Form.Item>\n    </Form>\n  )\n\n  const success = (\n    <Form>\n      <Form.Item validateStatus={'success'} hasFeedback help={''}>\n        <Input onChange={e => handleInput(e)} placeholder=\"ÅÅÅMMDDNNNN\" value={value} />\n      </Form.Item>\n    </Form>\n  )\n\n  const emptyInput = (\n    <Form>\n      <Form.Item validateStatus={'success'} help={''}>\n        <Input onChange={e => handleInput(e)} placeholder=\"ÅÅÅMMDDNNNN\" value={value} />\n      </Form.Item>\n    </Form>\n  )\n  return <Form>{value.length === 0 ? emptyInput : isValid ? success : warning}</Form>\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    ...state,\n    ssn: state.ssn\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setSsn: (value: any) => dispatch({ type: actionTypes.SET_SSN, ssn: value })\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SsnInput)\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Input, Form } from 'antd'\n\nimport * as actionTypes from '../Redux/actions'\n\nconst EmailInput = (props: any) => {\n  const [value, setValue] = useState('')\n  const [isValid, setIsValid] = useState(false)\n\n  const { email, setEmail } = props\n\n  isValid ? setEmail(value) : setEmail('')\n  console.log('reduxx', email)\n\n  const validateEmail = (email: string) => {\n    const regEx = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    let valid = regEx.test(String(email).toLowerCase())\n    console.log(valid)\n    if (valid) {\n      setIsValid(true)\n      // setEmail(value);\n    } else {\n      setIsValid(false)\n      // setEmail('');\n    }\n  }\n\n  const handleInput = (e: any) => {\n    e.preventDefault()\n    let input = e.target.value\n    setValue(input)\n    validateEmail(input)\n  }\n  const warning = (\n    <Form>\n      <Form.Item validateStatus={'warning'} help={'Use a valid Email'}>\n        <Input onChange={e => handleInput(e)} placeholder=\"ÅÅÅMMDDNNNN\" value={value} />\n      </Form.Item>\n    </Form>\n  )\n\n  const success = (\n    <Form>\n      <Form.Item validateStatus={'success'} hasFeedback help={''}>\n        <Input\n          onChange={e => handleInput(e)}\n          placeholder=\"sarkar.protik1@gmail.com\"\n          value={value}\n        />\n      </Form.Item>\n    </Form>\n  )\n\n  const emptyInput = (\n    <Form>\n      <Form.Item validateStatus={'success'} help={''}>\n        <Input\n          onChange={e => handleInput(e)}\n          placeholder=\"sarkar.protik1@gmail.com\"\n          value={value}\n        />\n      </Form.Item>\n    </Form>\n  )\n  return <Form>{value.length === 0 ? emptyInput : isValid ? success : warning}</Form>\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    ...state,\n    email: state.email\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setEmail: (value: any) => dispatch({ type: actionTypes.SET_EMAIL, email: value })\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(EmailInput)\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\n\nimport * as actionTypes from '../Redux/actions'\n\nimport { Input, Form } from 'antd'\n\nconst MobileInput = (props: any) => {\n  const [value, setValue] = useState('')\n  const [isValid, setIsValid] = useState(false)\n\n  const { mobile, setMobile } = props\n\n  isValid ? setMobile(value) : setMobile('')\n  console.log('redux', mobile)\n\n  const validatePhoneNr = (number: any) => {\n    if (number.length === 10) {\n      console.log(`${number} is Valid`)\n      setIsValid(true)\n      //   setPhoneNr(number);\n    } else {\n      //   setPhoneNr(\"\");\n      setIsValid(false)\n      console.log(`${number} is NOT Valid`)\n    }\n  }\n\n  const handleInput = (e: any) => {\n    e.preventDefault()\n    let input = e.target.value\n    setValue(input)\n    validatePhoneNr(input)\n  }\n  const warning = (\n    <Form>\n      <Form.Item validateStatus={'warning'} help={'Use a valid Phone Number'}>\n        <Input onChange={e => handleInput(e)} placeholder=\"0700510492\" value={value} />\n      </Form.Item>\n    </Form>\n  )\n\n  const success = (\n    <Form>\n      <Form.Item validateStatus={'success'} hasFeedback help={''}>\n        <Input onChange={e => handleInput(e)} placeholder=\"0700510492\" value={value} />\n      </Form.Item>\n    </Form>\n  )\n\n  const emptyInput = (\n    <Form>\n      <Form.Item validateStatus={'success'} help={''}>\n        <Input onChange={e => handleInput(e)} placeholder=\"0700510492\" value={value} />\n      </Form.Item>\n    </Form>\n  )\n  return <Form>{value.length === 0 ? emptyInput : isValid ? success : warning}</Form>\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    ...state,\n    mobile: state.mobile\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setMobile: (value: any) => dispatch({ type: actionTypes.SET_MOBILE, mobile: value })\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MobileInput)\n","import React, { useState, useEffect } from 'react'\n\nimport { connect } from 'react-redux'\nimport * as actionTypes from '../Redux/actions'\n\nimport { Form, Select } from 'antd'\n\nconst { Option } = Select\n\nconst CountryInput = (props: any) => {\n  const [value, setValue] = useState([])\n\n  const { country, setCountry } = props\n\n  const request = async () => {\n    const response = await fetch('https://restcountries.eu/rest/v2/all')\n    const json = await response.json()\n    let countryList = json.map((c: any) => c.name)\n    setValue(countryList)\n  }\n\n  useEffect(() => {\n    request()\n  }, [])\n\n  const handleChange = (e: any) => {\n    // setCountryValue(e)\n    setCountry(e)\n    console.log('This is country from redux:', country)\n  }\n\n  const emptyInput = (\n    <Form>\n      <Form.Item validateStatus={''} help={''}>\n        <Select defaultValue=\"\" onChange={handleChange} placeholder=\"Select a Country\">\n          {value.map((country: any) => {\n            return <Option value={country}>{country}</Option>\n          })}\n        </Select>\n      </Form.Item>\n    </Form>\n  )\n\n  const success = (\n    <Form>\n      <Form.Item validateStatus={'success'} hasFeedback help={''}>\n        <Select defaultValue=\"\" onChange={handleChange} placeholder=\"Select a Country\">\n          {value.map((country: any) => {\n            return <Option value={country}>{country}</Option>\n          })}\n        </Select>\n      </Form.Item>\n    </Form>\n  )\n\n  return value.length === 0 ? emptyInput : success\n  // return success\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    ...state,\n    country: state.country\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setCountry: (value: any) => dispatch({ type: actionTypes.SET_COUNTRY, country: value })\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CountryInput)\n","import React, { useState } from 'react'\nimport { Upload, Icon, message } from 'antd'\n\nimport { connect } from 'react-redux'\n\nimport * as actionTypes from '../Redux/actions'\n\nconst getBase64 = (img: any, callback: any) => {\n  const reader = new FileReader()\n  reader.addEventListener('load', () => callback(reader.result))\n  reader.readAsDataURL(img)\n}\n\nconst beforeUpload = (file: any) => {\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\n  if (!isJpgOrPng) {\n    message.error('You can only upload JPG/PNG file!')\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2\n  if (!isLt2M) {\n    message.error('Image must smaller than 2MB!')\n  }\n  return isJpgOrPng && isLt2M\n}\n\nconst AvatarInput = (props: any) => {\n  const [loading, setLoading] = useState(false)\n  const [imageUrl, setImageUrl] = useState('')\n\n  const handleChange = (info: any) => {\n    if (info.file.status === 'uploading') {\n      setLoading(true)\n      return\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      getBase64(info.file.originFileObj, (imageUrl: any) => {\n        setImageUrl(imageUrl)\n        console.log('this is redux:', imageUrl)\n        console.log('this is image', imageUrl)\n        setLoading(false)\n      })\n    }\n  }\n\n  const uploadButton = (\n    <div>\n      <Icon type={loading ? 'loading' : 'plus'} />\n      <div className=\"ant-upload-text\">Upload</div>\n    </div>\n  )\n\n  return (\n    <Upload\n      name=\"avatar\"\n      listType=\"picture-card\"\n      className=\"avatar-uploader\"\n      showUploadList={false}\n      action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n      beforeUpload={beforeUpload}\n      onChange={handleChange}\n    >\n      {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\n    </Upload>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    ...state,\n    image: state.image\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setImage: (value: any) => dispatch({ type: actionTypes.SET_IMAGE, image: value })\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AvatarInput)\n","import React, { useState } from 'react'\nimport { notification, message, Drawer, Form, Button, Col, Row, Icon } from 'antd'\nimport NameInput from './NameInput'\nimport SsnInput from './SsnInput'\nimport EmailInput from './EmailInput'\nimport MobileInput from './MobileInput'\nimport CountryInput from './CountryInput'\nimport AvatarInput from './AvatarInput'\n\nimport { connect } from 'react-redux'\n\nimport * as actionTypes from '../Redux/actions'\n\nconst openNotification = () => {\n  notification.open({\n    message: 'Sucess!',\n    description: 'A New User has been Created',\n    icon: <Icon type=\"smile\" style={{ color: '#9B7DDC' }} />\n  })\n}\n\nconst DrawerForm = (props: any) => {\n  const { image, name, ssn, mobile, email, country, addUser } = props\n\n  const [visible, setVisible] = useState(false)\n\n  const showDrawer = () => {\n    setVisible(true)\n  }\n\n  const onClose = () => {\n    setVisible(false)\n  }\n  const uniqueID = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n      var r = (Math.random() * 16) | 0,\n        v = c === 'x' ? r : (r & 0x3) | 0x8\n      return v.toString(16)\n    })\n  }\n\n  const handleSubmit = () => {\n    const errorMsg = {\n      image: 'If you want you can upload a picture!',\n      name: 'You must have a Name Right?',\n      ssn: 'Did you forget your number?',\n      mobile: 'I know you have a Phone',\n      email: 'E-Mail cannot be empty',\n      country: 'You forgot to select a country'\n    }\n\n    const error = (value: string) => {\n      message.error(value, 5)\n    }\n\n    if (name && ssn && mobile && email && country) {\n      let newUser = {\n        action: 'Delete',\n        id: uniqueID(),\n        key: uniqueID(),\n        avatar: image,\n        name: name,\n        ssn: ssn,\n        mobile: mobile,\n        email: email,\n        country: country\n      }\n\n      //only use this if there is a storeObj\n      if (localStorage.getItem('storeObj') === null) {\n        let cleanData = [newUser]\n        localStorage.setItem('storeObj', JSON.stringify(cleanData))\n      } else {\n        let lsData = JSON.parse(localStorage.getItem('storeObj') || '')\n        let cleanData = [...lsData, newUser]\n        localStorage.setItem('storeObj', JSON.stringify(cleanData))\n      }\n\n      onClose()\n      openNotification()\n      addUser(newUser)\n    }\n    if (!name) {\n      error(`${errorMsg.name}`)\n    }\n    if (!ssn) {\n      error(`${errorMsg.ssn}`)\n    }\n    if (!mobile) {\n      error(`${errorMsg.mobile}`)\n    }\n    if (!email) {\n      error(`${errorMsg.email}`)\n    }\n    if (!country) {\n      error(`${errorMsg.country}`)\n    }\n  }\n\n  return (\n    <div>\n      <Button type=\"primary\" onClick={() => showDrawer()}>\n        <Icon type=\"robot\" /> Create New User\n      </Button>\n      <Drawer\n        title=\"Create a new User\"\n        width={window.innerWidth * 0.4}\n        onClose={() => onClose()}\n        visible={visible}\n      >\n        <Form\n          onSubmit={() => {\n            console.log('submitted')\n          }}\n          layout=\"vertical\"\n          hideRequiredMark\n        >\n          <Row gutter={16}>\n            <Col span={24}>\n              <AvatarInput />\n            </Col>\n          </Row>\n          <Row gutter={16}>\n            <Col span={12}>\n              <Form.Item label=\"Name\">\n                <NameInput />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item label=\"Social Security No.\">\n                <SsnInput />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Row gutter={16}>\n            <Col span={12}>\n              <Form.Item label=\"Mobile\">\n                <MobileInput />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item label=\"E-Mail\">\n                <EmailInput />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Row gutter={16}>\n            <Col span={12}>\n              <Form.Item label=\"Country\">\n                <CountryInput />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Form>\n        <div\n          style={{\n            position: 'absolute',\n            left: 0,\n            bottom: 0,\n            width: '100%',\n            borderTop: '1px solid #e9e9e9',\n            padding: '10px 16px',\n            background: '#fff',\n            textAlign: 'right'\n          }}\n        >\n          <Button\n            onClick={() => {\n              onClose()\n            }}\n            style={{ marginRight: 8 }}\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              handleSubmit()\n            }}\n            type=\"primary\"\n          >\n            Submit\n          </Button>\n        </div>\n      </Drawer>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: any, action: any) => {\n  return {\n    ...state,\n    data: [...state.data, action.addUser]\n  }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    addUser: (object: any) => dispatch({ type: actionTypes.ADD_USER, addUser: object })\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DrawerForm)\n","import React, { useState } from 'react'\n\nimport { Popconfirm, message, Avatar, Table, Divider } from 'antd'\n\nimport { connect } from 'react-redux'\n\nimport * as actionTypes from '../Redux/actions'\n\nconst DataTable = (props: any) => {\n  const { deleteUser } = props\n  const [userData, setUserData] = useState([])\n\n  const item = () => {\n    if (!localStorage.getItem('storeObj')) {\n      return []\n    } else {\n      let data = localStorage.getItem('storeObj')\n      return JSON.parse(data || '')\n    }\n  }\n\n  const deleteUserLocalStorage = (id: number) => {\n    let current_data = JSON.parse(localStorage.getItem('storeObj') || '')\n    let updatedUserData = current_data.filter((result: any) => result.id !== id)\n    let parsedOutput = JSON.stringify(updatedUserData)\n    localStorage.setItem('storeObj', parsedOutput)\n  }\n\n  const handleDelete = (userObject: any) => {\n    let updatedUserData = userData.filter((result: any) => result.key !== userObject.key)\n    setUserData(() => {\n      return [...updatedUserData]\n    })\n    deleteUser(userObject.id)\n    deleteUserLocalStorage(userObject.id)\n  }\n\n  const confirm = (e: any, object: any) => {\n    handleDelete(object)\n    message.success('Deleted')\n  }\n\n  const cancel = (e: any) => {\n    console.log(e)\n    message.error('Cancelled')\n  }\n\n  const columns = [\n    {\n      title: 'Avatar',\n      dataIndex: 'avatar',\n      key: 'avatar',\n      render: (text: string) => {\n        return (\n          <Avatar\n            style={{ height: '100%' }}\n            icon=\"user\"\n            //   src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\n          />\n        )\n      }\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name'\n    },\n    {\n      title: 'SSN',\n      dataIndex: 'ssn',\n      key: 'ssn'\n    },\n    {\n      title: 'Mobile',\n      dataIndex: 'mobile',\n      key: 'mobile'\n    },\n\n    {\n      title: 'E-Mail',\n      dataIndex: 'email',\n      key: 'email'\n    },\n    {\n      title: 'Country',\n      dataIndex: 'country',\n      key: 'country'\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      render: (text: any, record: any) => {\n        return (\n          <span>\n            <Divider type=\"vertical\" />\n            <Popconfirm\n              title=\"Are you sure?\"\n              onConfirm={e => confirm(e, record)}\n              onCancel={cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <a href=\"#\">Delete</a>\n            </Popconfirm>\n          </span>\n        )\n      }\n    }\n  ]\n\n  return (\n    <div style={{ minWidth: 900, maxHeight: 30 }}>\n      <Table\n        style={{ backgroundColor: 'white', opacity: 0.8 }}\n        pagination={false}\n        columns={columns}\n        dataSource={item()}\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: any, action: any) => {\n  return {\n    ...state\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    deleteUser: (id: any) => dispatch({ type: actionTypes.DELETE_USER, id: id })\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DataTable)\n","import React from 'react'\n\nimport DrawerForm from './Components/DrawerForm'\n\nimport DataTable from './Components/DataTable'\n\nconst MainComponent = () => {\n  return (\n    <div>\n      <DrawerForm />\n      <DataTable />\n    </div>\n  )\n}\n\nexport default MainComponent\n","import React, { useState } from 'react'\nimport Logo from './Assets/code.svg'\n\nimport './App.css'\nimport MainComponent from './MainComponent'\n\nconst App: React.FC = () => {\n  const [width] = useState(window.innerWidth)\n  return (\n    <>\n      <div className=\"body1\">\n        <img\n          alt={'Coding Logo'}\n          style={{\n            width: width * 0.25,\n            height: 'auto',\n            borderRadius: 20,\n            justifyContent: 'flex-end'\n          }}\n          src={Logo}\n        />\n        <MainComponent />\n      </div>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actions'\n\nconst initialState = {\n  name: '',\n  ssn: '',\n  mobile: '',\n  email: '',\n  country: '',\n  image: '',\n  data: [\n    {\n      id: '782323',\n      key: '12390478s239084',\n      avatar: 'Avatar',\n      name: 'Protik Sarkar',\n      ssn: '8803176280',\n      mobile: '0700519493',\n      email: 'sarkar.protik1@gmail.com',\n      country: 'Sweden',\n      action: 'Delete'\n    }\n  ]\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_IMAGE:\n      return {\n        ...state,\n        image: action.image\n      }\n    case actionTypes.SET_NAME:\n      return {\n        ...state,\n        name: action.name\n      }\n    case actionTypes.SET_SSN:\n      return {\n        ...state,\n        ssn: action.ssn\n      }\n    case actionTypes.SET_MOBILE:\n      return {\n        ...state,\n        mobile: action.mobile\n      }\n    case actionTypes.SET_EMAIL:\n      return {\n        ...state,\n        email: action.email\n      }\n    case actionTypes.SET_COUNTRY:\n      return {\n        ...state,\n        country: action.country\n      }\n    case actionTypes.DELETE_USER:\n      let updatedData = state.data.filter(result => result.id !== action.id)\n      return {\n        ...state,\n        data: updatedData\n      }\n    case actionTypes.ADD_USER:\n      return {\n        ...state,\n        data: [...state.data, action.addUser]\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { createStore } from 'redux'\nimport reducer from './Redux/reducer'\nimport { Provider } from 'react-redux'\n\nconst store = createStore(reducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}